/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    DateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    DateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  FilterJobOfferBy: "startDate" | "visibility"
  SortJobOfferBy: "id" | "startDate" | "title"
  SortOrder: "asc" | "desc"
  SortUserBy: "email" | "id" | "name"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  JobOffer: { // root type
    authorId?: number | null; // Int
    id: string; // ID!
    linkedInLink?: string | null; // String
    place?: string | null; // String
    sector?: string | null; // String
    service?: string | null; // String
    serviceId?: number | null; // Int
    skills?: string | null; // String
    startDate: string; // String!
    title: string; // String!
    visibilty: boolean; // Boolean!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    password: string; // String!
    role: Array<number | null>; // [Int]!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  JobOffer: { // field return type
    authorId: number | null; // Int
    id: string; // ID!
    linkedInLink: string | null; // String
    place: string | null; // String
    sector: string | null; // String
    service: string | null; // String
    serviceId: number | null; // Int
    skills: string | null; // String
    startDate: string; // String!
    title: string; // String!
    visibilty: boolean; // Boolean!
  }
  Mutation: { // field return type
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteUser: NexusGenRootTypes['User'] | null; // User
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    hello: string | null; // String
    jobOffers: Array<NexusGenRootTypes['JobOffer'] | null> | null; // [JobOffer]
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    email: string; // String!
    id: string; // ID!
    jobOffers: Array<NexusGenRootTypes['JobOffer'] | null> | null; // [JobOffer]
    name: string; // String!
    password: string; // String!
    role: Array<number | null>; // [Int]!
  }
}

export interface NexusGenFieldTypeNames {
  JobOffer: { // field return type name
    authorId: 'Int'
    id: 'ID'
    linkedInLink: 'String'
    place: 'String'
    sector: 'String'
    service: 'String'
    serviceId: 'Int'
    skills: 'String'
    startDate: 'String'
    title: 'String'
    visibilty: 'Boolean'
  }
  Mutation: { // field return type name
    createUser: 'User'
    deleteUser: 'User'
    updateUser: 'User'
  }
  Query: { // field return type name
    hello: 'String'
    jobOffers: 'JobOffer'
    user: 'User'
    users: 'User'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    jobOffers: 'JobOffer'
    name: 'String'
    password: 'String'
    role: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUser: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
      role?: number | null; // Int
    }
    deleteUser: { // args
      id: string; // ID!
    }
    updateUser: { // args
      email?: string | null; // String
      id: string; // ID!
      name?: string | null; // String
      password?: string | null; // String
      role?: number | null; // Int
    }
  }
  Query: {
    jobOffers: { // args
      FilterJobOfferBy: NexusGenEnums['FilterJobOfferBy'] | null; // FilterJobOfferBy
      sortJobOfferBy: NexusGenEnums['SortJobOfferBy'] | null; // SortJobOfferBy
      sortOrder: NexusGenEnums['SortOrder'] | null; // SortOrder
    }
    user: { // args
      id: string; // String!
    }
    users: { // args
      sortOrder: NexusGenEnums['SortOrder'] | null; // SortOrder
      sortUserBy: NexusGenEnums['SortUserBy'] | null; // SortUserBy
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}